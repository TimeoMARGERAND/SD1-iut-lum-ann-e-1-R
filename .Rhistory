install.packages("readx1")
library(readxl)
install.packages("readxl")
library(readxl)
dim(pokemon)
setwd(dir="L:/BUT/SD/Promo 2024/tmargerand/U1/programmation statistique/TD3")
install.packages("readxl")
library(readxl)
pokemon <- read_excel(path = "pokemon.xlsx",sheet = "pokemon")
dim(pokemon)
pokemon <- read_excel(path = "pokemon.xlsx",sheet = "pokemon")
install.packages("readxl")
library(readxl)
pokemon <- read_excel(path = "pokemon.xlsx",sheet = "pokemon")
dim(pokemon)
nrow(pokemon)
ncol(pokemon)
summary(pokemon)
pokemon$is_legendary <-as.factor(pokemon$is_legendary)
pokemon$generation <-as.factor(pokemon$generation)
pokemon$type <-as.factor(pokemon$type)
view(pokemon)
View(pokemon)
summary(pokemon)
mean(pokemon$attack)
mean1=mean(pokemon$attack)
pokemon$attack_group=ifelse(test=pokemon$attack>mean1,yes="attack+",no="attack-")
pokemon$water_fire=ifelse(test=pokemon$type $in$ c("water","fire"),yes="yes",no="no")
pokemon$water_fire=ifelse(test=pokemon$type %in% c("water","fire"),yes="yes",no="no")
pokemon$water_fire=as.factor(pokemon$water_fire)
summary(pokemon)
a3=quantile(pokemon$attack,probs=0.75)
d3=quantile(pokemon$defense, probs=0.75)
a3=quantile(pokemon$attack,probs=0.75)
d3=quantile(pokemon$defense, probs=0.75)
v3=quantile(pokemon$speed, probs=0.75)
pokemon$best=ifelse(test=pokemon$attack>a3 & pokemon$defense>d3 & pokemon$speed>v3,yex="yes",no="no")
pokemon$best=ifelse(test=pokemon$attack>a3 & pokemon$defense>d3 & pokemon$speed>v3,yes="yes",no="no")
a3=quantile(pokemon$attack,probs=0.75)
d3=quantile(pokemon$defense, probs=0.75)
v3=quantile(pokemon$speed, probs=0.75)
pokemon$best=ifelse(test=pokemon$attack>a3 & pokemon$defense>d3 & pokemon$speed>v3,yes="yes",no="no")
pokemon$best=as.factor(pokemon$best)
summary(pokemon)
requete=is.na(pokemon$weight_kg)
requete=is.na(pokemon$weight_kg
View(requete)
requete=is.na(pokemon$weight_kg
print(requete)
requete = subset(pokemon, is.na(weight_kg))
View(requete)
requete$weight_kg=mean(pokemon$weight_kg)
requete$weight_kg=mean(pokemon$weight_kg)
view(requete)
requete$weight_kg=mean(pokemon$weight_kg)
View(requete)
requete2 = subset(pokemon, !is.na(weight_kg))
View(requete)
med_weight=median(pokemon$weight_kg,na.rm=true)
med_weight=median(pokemon$weight_kg,na.rm=TRUE)
med_height=median(pokemon$height_m,na.rm=TRUE)
pokemon$weight_kg_NA=ifelse(test=pokemon$weight_kg)
med_weight=median(pokemon$weight_kg,na.rm=TRUE)
med_height=median(pokemon$height_m,na.rm=TRUE)
pokemon$weight_kg_NA=ifelse(test=is.na(pokemon$weight_kg),med_weight,pokemon$weight_kg)
pokemon$height_m_NA=ifelse(is.na(pokemon$height_m),med_height,pokemon$height_m)
pokemon$weightgroup=cut(pokemon$weight_kg,breaks=3,labels=c("l√©ger","moyen","lourd"))
View(pokemon)
pokemon$heightgroup=cut(pokemon$height_kg,breaks=4,labels=c("petit","moyen","grand"))
pokemon$heightgroup=cut(pokemon$height_m,breaks=4,labels=c("petit","moyen","grand"))
pokemon$heightgroup=cut(pokemon$height_m_NA,breaks=4,labels=c("petit","moyen","grand"))
pokemon$heightgroup=cut(pokemon$height_M_NA,breaks=4,labels=c("petit","moyen","grand"))
pokemon$heightgroup=cut(pokemon$height_m,breaks=4,labels=c("petit","moyen","grand"))
pokemon$height_m_group = cut(pokemon$height_m,
breaks = c(0,1,2,3,
max(pokemon$height_m,
na.rm = TRUE)))
View(pokemon)
quartile1=quantile(pokemon$defense,seq(0.2,0.80.2))
quartile1=quantile(pokemon$defense,seq(0.2,0.8,0.2))
print(quartile)
View(quartile)
quartile
min=min(pokemon$defense)
quartile1=quantile(pokemon$defense,0.25)
max=max(pokemon$defense)
quartile2=quantile(pokemon$defense,0.5)
quartile2=quantile(pokemon$defense,0.75)
min=min(pokemon$defense)
quartile1=quantile(pokemon$defense,0.25)
max=max(pokemon$defense)
quartile2=quantile(pokemon$defense,0.5)
quartile3=quantile(pokemon$defense,0.75)
defense_group=cut(pokemon$defense,c(min,quartile1,quartile2,quartile3,max))
pokemon$defense_group=cut(pokemon$defense,c(min,quartile1,quartile2,quartile3,max))
View(pokemon$defense_group)
pokemon$defense_group = cut(pokemon$defense,
breaks = quantile(pokemon$defense,
na.rm = TRUE),
include.lowest = TRUE)
summary(pokemon$defense_group)
aggregate(x = attack ~ type,
data = pokemon,
FUN = function(x) mean(x))
aggregate(x = attack ~ type,
data = pokemon,
FUN = function(x) mean(x))
aggregate(attack~generation & type,pokemon,fun = function(x)median(x))
aggregate(attack~ c("generation","type"),pokemon,fun = function(x)median(x))
aggregate(x = attack ~ generation + type,
data = pokemon,
FUN = function(x) median(x))
aggregate(x=nom~type,pokemon,FUN = function(x) nrow(x))
aggregate(x=pokedex_number~type,pokemon,FUN = function(x) length(x))
aggregate(x=speed~generation+type,pokemon,Fun=function(x),mean(x)+median(x))
aggregate(x=speed~generation+type,pokemon,Fun=function(x) mean(x)+median(x))
aggregate(x=speed~generation+type,pokemon,Fun=function(x) mean(x) median(x))
aggregate(speed ~ generation + type,
data = pokemon,
FUN = function(x) c(moy = mean(x),
med = median(x),
eff = length(x) ) )
